 
1. What does the following code fragment print when N is 50 ? 

Stack<Integer> stack = new Stack<Integer>(); 
while (N > 0) { 
       stack.push(N % 2); 
       N = N / 2; 
} 
while (! stack.isEmpty()) 
       System.out.print(stack.pop()); 

 Solution:
    N values       Stack
      50             0
      25             1
      12             0
       6             0
       3             1
       1             1
  output of stack is 1,1,0,0,1,0.

2. Give the output printed by Queue for the input at the end of all operations
If “-” perform dequeue else enqueue each word.
Playing Cricket - is - a hobby - - of - - mentor - deepak

solution:

steps            elements in queue
  1              playing (playing is enqueued)

  2              playing cricket (cricket is enqueued)

  3              cricket (playing is dequeued)

  4              cricket is (is is enqueued)

  5              is (cricket is dequeued)

  6              is a (a is enqueued)

  7              is a hobby (hobby is enqueued)

  8              a hobby (is is dequeued)

  9              hobby (a is dequeued)

  10             hobby of (ofis enqueued)

  11             of (hobby is dequeued)

  12             queue is empty (of is dequeued)

  12             mentor (mentor is enqueued)

  13             queue is empty (mentor is dequeued)

  14             deepak (deepak is enqueued)

  output : deepak

 3. Suppose that a client performs an intermixed sequence of (stack) push and pop operations. The push operations put the integers 0 through 9 in order onto the stack; the pop operations print out the return values. Which of the following sequence(s) could not occur?
Note: For answer write the options in order separated with comma and space eg: a, b, d 
a. 5 4 3 1 2 0 9 8 7 6
b. 0 9 8 7 6 5 4 3 2 1
c. 0 1 2 3 4 5 6 7 8 9
d. 1 3 5 7 9 2 4 6 8 0
e. 1 5 0 2 3 4 6 7 8 9

solution:
 
 a) In this sequence, we cann't pop 1 before poping 2. So, it is not posible.

 b) In this sequence, 0 is pushed and poped. After that from 1 to 9 numbers were pushed and poped. So, it is posible.

 c) In this sequence, all numbers are pushed and emietaly poped before pushing new number. So, it is posible.

 d) In this sequence, we cann't pop 2 before poping 8,6,4. So,it is not posible.

 e) In this sequence, we cann't pop 0 before poping 4,3,2. So,it is not posible.

 answers : b,c


4. Give the minimum and maximum occupancy percentages for resizing arrays?
Give the number of components remain at the end of Quick Find Algorithm for the following union operations.
a. 3-4
b. 4-9
c. 8-0
d. 2-3
e. 5-6
f. 5-9
g. 7-3
h. 4-8
i. 6-1


solution :

 

 Initialy             0   1   2   3   4   5   6   7   8   9

 Step 1: (3 - 4)      0   1   2   4   4   5   6   7   8   9
 Step 2: (4 - 9)      0   1   2   9   9   5   6   7   8   9
 Step 3: (8 - 0)      0   1   2   9   9   5   6   7   0   9
 Step 4: (2 - 3)      0   1   9   9   9   5   6   7   0   9
 Step 5: (5 - 6)      0   1   9   9   9   6   6   7   0   9
 Step 6: (5 - 9)      0   1   9   9   9   9   9   7   0   9
 Step 7: (7 - 3)      0   1   9   9   9   9   9   9   0   9
 Step 8: (4 - 8)      0   1   0   0   0   0   0   0   0   0
 Step 9: (6 - 1)      1   1   1   1   1   1   1   1   1   1
   
   All are connected.

 5. {[]()} If you use stacks for checking parentheses balanced or not ? 
After each iteration, Print the size of the stack.

 Solution:

     Iterations   Inputs   stack     size of stack
          1        {         {             1
          2        [         {[            2
          3        ]         {             1
          4        (         {(            2
          5        )         {             1
          6        }         empty         0

         Stack is empty. So, all parentheses are balanced.


 6. Give the order of growth (as a function of N, k) of the running times of the following code fragment: 
 
 int sum = 0, k = 4; 
 for (int n = N; n > 0; n1= k) 
      for(int i = 0; i < n; i++) 
             sum++; 

 Solution:
      best case time complexcity is N,
      worest case time complexcity is N*N.

      
 7. Give the order of growth (as a function of n ) of the running times of the following code fragment: 

 int foo(int N) { 
      int x; 
      for (int i = 0; i < N; i++) { 
              x += i; 
      } 
      for (int i = 1; i < N/2; i++) { 
              x *= i; 
      } 
      return x;
  } 
 
 Solution:
       best case time complexcity is 3N/2,
       worest case time complexcity is NlogN.

 8. Give the order of growth (as a function of n ) of the running times of the following code fragment: 
 
 int factorial(int N){
         if (N == 0) { 
              return 1;
         }
         else { 
              return N * factorial(N - 1); 
         }
 } 
  
 Solution:
       best case time complexcity is 1,
       worest case time complexcity is N.

 9. Give the order of growth (as a function of n ) of the running times of the following code fragment: 

 void function(int N) { 
    if (N == 1) 
         return; 
    for(inti=1;i<=N;i++){ 
       for (int j = 1; j <= N; j++) { 
           printf("*"); 
           return; 
         } 
       } 
     }

 Solution:
      Time complexcity is N.

 10. Give the number of components remain at the end of Quick Find Algorithm for the following union operations.
a. 3-4
b. 4-9
c. 8-0
d. 2-3
e. 5-6
f. 5-9
g. 7-3
h. 4-8
i. 6-1


solution :

 

 Initialy             0   1   2   3   4   5   6   7   8   9

 Step 1: (3 - 4)      0   1   2   4   4   5   6   7   8   9
 Step 2: (4 - 9)      0   1   2   9   9   5   6   7   8   9
 Step 3: (8 - 0)      0   1   2   9   9   5   6   7   0   9
 Step 4: (2 - 3)      0   1   9   9   9   5   6   7   0   9
 Step 5: (5 - 6)      0   1   9   9   9   6   6   7   0   9
 Step 6: (5 - 9)      0   1   9   9   9   9   9   7   0   9
 Step 7: (7 - 3)      0   1   9   9   9   9   9   9   0   9
 Step 8: (4 - 8)      0   1   0   0   0   0   0   0   0   0
 Step 9: (6 - 1)      1   1   1   1   1   1   1   1   1   1
   
   All are connected.

